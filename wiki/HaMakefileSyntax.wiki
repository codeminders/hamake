#summary hamakefile syntax
#labels Phase-Design

= Introduction =

This page describe syntax of XML files understood by 'hamake'. 

= Informal description ==

The file is an XML document. 

== project ==

The root element is 'project'.
It must contain one 'config' sub-element and one or more 'map' or 'reduce' sub-elements.

Attributes:
  * 'default' - name of default target (optional)
  * 'name' - project name (optional)
Allowed sub-elements: 'config',  'map', 'reduce'

== project/config ==

This element describes general configuration parameters.
Allowed sub-elements: 'dfs' and  'property'

=== project/config/dfs ===

This elements contains DFS-related information. Currently only
one sub-element is understood: thriftAPI

Element: 'thriftAPI'
Attributes:
  * 'host' - host name of HadooopThriftServer
  * 'port' - port number of HadooopThriftServer

Example:

{{{
<dfs>
 <thriftAPI host="example.com" port="9009" />
</dfs>
}}}

=== project/config/property ===

For user convenience user can define one or more "properties". Properties
are named values, which could be used in sections of hamakefile (outside 'config').
They work like macros. Example of property definition:

{{{
<property name="dfsroot" value="/dfs" />
<property name="numreducers" value="14" />
}}}

Now they could be used in any string attribute, using [http://docs.python.org/library/stdtypes.html#string-formatting Python string formatting syntax]. For example:

{{{
<path location="%(dfsroot)s/data" />
}}}

== project/map ==

This element described map task. This a type of task which maps a group of files at one location to another location(s). This task assumes 1 to 1 file mapping between locations, and can process them incrementally, converting only files which are present at source location, but not present or not current at all of destinations.

The task have one input path, and one or more dependent paths and one or more output paths.
One output file must produce one output file with the same name, per output location. 
Output location file considered to be current if all of the following conditions are satisfied:
   # Output file is present
   # Output file time stamp is older than input file
   # Output file time stamp is older than any of time stamps of files with same name in all dependent directories

In its simplest form, 'map' have one input and one output.

Attributes:
  * 'name' - name of the task (mandatory). Used for reporting or could be specified as build target
  * 'disabled' - boolean flag whenever this task is disabled (optional). Disabled tasks are ignored. Allowed values are 'yes'/'no' or 'true'/'false'.

Sub-elements:
  * 'description' - single element which context is textual description of the task. (optional)
  * 'input' - this element must contain one and only one 'path' element (mandatory)
  * 'dependencies' - this element may contain zero or more path elements (optional)
  * 'output' - this element must contain one or more 'path' elements (mandatory)
  * 'taskdep' - optional list of 'pretask' elements specifying on what tasks this task depends on (optional)
  * Exactly one either 'task', 'pig' or 'exec' element (mandatory)

Example:

{{{
	<map name="a2r">
		<description>
                     Extract some information from access logs
               </description>
		<input>
			<path location="%(dfsroot)s/access_logs" mask="*.log" />
		</input>
		<dependencies />
		<output>
			<path location="%(dfsroot)s/r" />
		</output>
                <taskdep>
                    <pretask name="calc1"/>
                </taskdep>
		<task jar="%(queries)s/datamining.jar" main="us.imageshack.datamining.A2R">
			<pathparam type="inputfile" />
			<pathparam type="outputfile" />
		</task>
	</map>
}}}

== project/reduce ==
This a type of task which takes a group of files as an input and produce one or more outputs. All input files are considered to be a set, and if any of them is newer than any of destination, the re-calculation will be triggered.

In its simplest form, 'reduce' have one input and one output.

Attributes:
  * 'name' - name of the task (mandatory). Used for reporting or could be specified as build target
  * 'disabled' - boolean flag whenever this task is disabled (optional). Disabled tasks are ignored. Allowed values are 'yes'/'no' or 'true'/'false'.

Sub-elements:
  * 'description' - single element which context is textual description of the task. (optional)
  * 'input' - this element must contain one ore more 'path' elements (mandatory)
  * 'output' - this element must contain one or more 'path' elements (mandatory)
  * 'taskdep' - optional list of 'pretask' elements specifying on what tasks this task depends on (optional)
  * Exactly one either 'task', 'pig' or 'exec' element (mandatory)

Example:

{{{
	<reduce name="caclulate_totals">
		<description>
                  Calculate something
               </description>
		<input>
			<path location="%(dfsroot)s/r" mask="*.log" />
		</input>
		<output>
			<path location="%(dfsroot)s/r_t" />
		</output>
                <taskdep>
                    <pretask name="calc1"/>
                </taskdep>
		<task jar="%(queries)s/datamining.jar" main="us.imageshack.datamining.CalcTotals">
			<pathparam type="input" mask="suppress"/>
			<pathparam type="output" />
		</task>
	</reduce>
}}}

== 'path' elements ==

'path' elements are used to specify input or output paths.

Attributes:
  * 'location' - path on DFS  (mandatory)
  * 'mask' - filename glob mask (optional)
  * 'filename' - filename (optional)
  * 'validity_period' - for now many seconds this output considered valid (optional). In other words, this is max. allowed time difference between inputs and outputs.  The period is number followed by optional letter. Following letters are understood:
    * 's': seconds (optional)
    * 'm': minutes
    * 'h': hours
    * 'd': days
    * 'w': weeks
  * 'generation' - "generation" of the file. (see below) 

location usually corresponds to filesystem path. If filename specified, the elements
corresponds to one file under this location. 

Alternatively, instead of 'filename', 'mask' could be specified to reference more than one file.

TODO: document 'generation'
TODO: document how paths 'intersect' to calculate dependencies.

Example:
{{{
<path location="%(dfsroot)s/access_logs" mask="*.log" />
}}}

== {map/reduce}/task  ==
{{{
<task jar="%(queries)s/datamining.jar" main="us.imageshack.datamining.A2R">
	<pathparam type="inputfile" />
	<pathparam type="outputfile" />
</task>
}}}
TBD

== {map/reduce}/pig  ==
Execute PIG script. Example:

{{{
<pig script="%(basedir)s/script.pig">
  <pathparam type="input" number="0" name="DOMAINS_PATH"/>
  <pathparam type="input" number="1" mask="keep" name="NP_PATH"/>
  <pathparam type="output" number="0"  name="DST_PATH"/>
  <pigparam name="PIGPARALLEL" value="16"/>
</pig>

}}}

== {map/reduce}/exec  ==
Execute arbitrary command. Example:

{{{
    <exec binary="/usr/bin/touch">
      <constparam value="/tmp/x0"/>
    </exec>
}}}



= XML Schema ==

XML Schema definition for hamakefiles could be found in _hamakefile.xsd_ file in the hamake distribution.
= Examples =

See 'sample_hamakefile.xml' included in distribution for an example. 