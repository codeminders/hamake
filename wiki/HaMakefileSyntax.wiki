#summary hamakefile syntax
#labels Phase-Design

= Introduction =

This page describe syntax of XML files understood by 'hamake'. 

= Informal description ==

The file is an XML document. 

== project ==

The root element is 'project'.
It must contain one 'config' sub-element and one or more 'map' or 'reduce' sub-elements.

Attributes:
  * 'default' - name of default target (optional)
  * 'name' - project name (optional)
Allowed sub-elements: 'config',  'map', 'reduce'

== project/config ==

This element describes general configuration parameters.
Allowed sub-elements: 'dfs' and  'property'

=== project/config/dfs ===

This elements contains DFS-related information. Currently only
one sub-element is understood: thriftAPI

Element: 'thriftAPI'
Attributes:
  * 'host' - host name of HadooopThriftServer
  * 'port' - port number of HadooopThriftServer

Example:

{{{
<dfs>
 <thriftAPI host="example.com" port="9009" />
</dfs>
}}}

=== project/config/property ===

For user convenience user can define one or more "properties". Properties
are named values, which could be used in sections of hamakefile (outside 'config').
They work like macros. Example of property definition:

{{{
<property name="dfsroot" value="/dfs" />
<property name="numreducers" value="14" />
}}}

Now they could be used in any string attribute, using [http://docs.python.org/library/stdtypes.html#string-formatting Python string formatting syntax]. For example:

{{{
<path location="%(dfsroot)s/data" />
}}}

== project/map ==

This element described map task. This a type of task which maps a group of files at one location to another location(s). This task assumes 1 to 1 file mapping between locations, and can process them incrementally, converting only files which are present at source location, but not present or not current at all of destinations.

The task have one input path, and one or more dependent paths and one or more output paths.
One output file must produce one output file with the same name, per output location. 
Output location file considered to be current if all of the following conditions are satisfied:
   # Output file is present
   # Output file time stamp is older than input file
   # Output file time stamp is older than any of time stamps of files with same name in all dependent directories

In its simplest form, 'map' have one input and one output.

Attributes:
  * 'name' - name of the task (mandatory). Used for reporting or could be specified as build target

Sub-elements:
  * 'description' - single element which context is textual description of the task. (optional)
  * 'input' - this element must contain one and only one 'path' element (mandatory)
  * 'dependencies' - this element may contain zero or more path elements (optional)
  * 'output' - this element must one or more 'path' element (mandatory)
  * Exactly one either 'task' or 'pig' element (mandatory)




= XML Schema ==

TBD

= Examples =

See 'sample_hamakefile.xml' included in distribution for an example. 